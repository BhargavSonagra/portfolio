[
  {
    "id": "World Atlas",
    "name": "World Atlas",
    "description": "An interactive map showcasing various places around the world.",
    "link": "https://myworldatlass.netlify.app/",
    "title": "World Atlas",
    "image": "/images/world_SS.png",
    "qr": "/images/world_qr.png",
    "Technologies": [
      "React",
      "Tailwind CSS",
      "Framer Motion",
      "REST Countries API",
      "Netlify"
    ],
    "Full_description": [
      "Created a fully responsive WorldAtlas web application using React.js as the core framework.",
      "Fetched country data using the REST Countries API to display flags, capitals, currencies, and regions.",
      "Integrated a second API and WIKIPEDIA LINKS to provide additional country insights such as history or facts.",
      "Combined data from multiple APIs to enrich the user experience with contextual knowledge.",
      "Used React Hooks (useState, useEffect) for efficient state management and lifecycle handling.",
      "Implemented conditional rendering and loading skeletons for a smooth user experience.",
      "Designed dynamic UI with Tailwind CSS for utility-first responsive styling.",
      "Used Framer Motion for animated transitions, page fades, and hover interactions.",
      "Built reusable React components such as country cards, detail views, and filters.",
      "Added a real-time search bar for quick filtering of countries by name.",
      "Displayed detailed pages for each country including Wikipedia and external info links.",
      "Ensured mobile responsiveness and cross-browser compatibility across devices.",
      "Used async/await for asynchronous API calls with error handling.",
      "Lazy-loaded flag images and data sections to optimize performance.",
      "Structured the application using a modular, component-based architecture.",
      "Implemented light/dark theme toggle using Tailwind utility classes.",
      "Hosted the app on Netlify for public access and live deployment.",
      "Used Git and GitHub for version control and project management.",
      "Applied clean UI/UX practices to deliver an educational and modern experience.",
      "Technologies used: React, Tailwind CSS, Framer Motion, REST APIs, Netlify."
    ]
  },
  {
    "id": "EverSafe Insurance",
    "name": "EverSafe Insurance",
    "description": "A mock insurance website providing various insurance services.",
    "link": "https://eversafeinsurance.netlify.app/",
    "title": "EverSafe Insurance",
    "image": "/images/eversafe_SS.png",
    "qr": "/images/ever_qr.png",
    "Technologies": [
      "React",
      "Tailwind",
      "HTML",
      "CSS",
      "API",
      "Netlify",
      "Framer-Motion"
    ],
    "Full_description": [
      "Developed a responsive, multi-category insurance website using React.js for the frontend structure.",
      "Utilized Bootstrap 5 for consistent styling and mobile-first design.",
      "Integrated Framer Motion for smooth scroll-triggered and hover-based animations.",
      "Built modular, reusable React components for cards, forms, and sections.",
      "Designed pages for health, auto, life, travel, and business insurance services.",
      "Implemented animated hero sections with call-to-action buttons.",
      "Used Swiper carousel and Bootstrap sliders to display featured policies.",
      "Managed data using structured JSON for scalability and fast updates.",
      "Used React Hooks (useState, useEffect) for efficient state and lifecycle handling.",
      "Styled modals and forms with Bootstrap, including validation for user input.",
      "Ensured full cross-browser compatibility and device responsiveness.",
      "Followed semantic HTML5 standards and included ARIA tags for accessibility.",
      "Created FAQ and testimonial sections to boost user trust and engagement.",
      "Applied custom CSS for theme consistency, including gradients and shadows.",
      "Prevented search engine indexing using robots.txt and <meta name=\"robots\">.",
      "Added routing with React Router DOM for seamless page navigation.",
      "Optimized image loading and performance with lazy loading techniques.",
      "Hosted the site on Netlify Free Tier for live demo access.",
      "Maintained clean code structure with comments, Git version control, and GitHub push.",
      "Technologies used: React, Bootstrap 5, Framer Motion, HTML5, CSS3, Netlify."
    ]
  },
  {
    "id": "Live Weather Website",
    "name": "Live Weather Website",
    "description": "A weather forecasting website using real-time APIs.",
    "link": "https://liveweatherwebsite.netlify.app/",
    "title": "Live Weather Website",
    "image": "/images/weather_SS.png",
    "qr": "/images/weath_qr.png",
    "Technologies": [
      "JavaScript",
      "HTML",
      "CSS",
      "OpenWeather API",
      "Netlify"
    ],
    "Full_description": [
      "Developed a Live Weather Website using core JavaScript, HTML5, and CSS3.",
      "Integrated OpenWeatherMap API to fetch real-time weather data by city name.",
      "Designed a responsive layout using CSS Flexbox and media queries.",
      "Displayed key weather details including temperature, humidity, wind speed, and conditions.",
      "Used JavaScript DOM manipulation to dynamically update UI elements with API data.",
      "Implemented a city search input field with instant data retrieval on submit.",
      "Added basic loading indicators and error messages for invalid inputs.",
      "Incorporated weather condition icons from the API or icon libraries.",
      "Applied smooth CSS transitions and animations to elements on load and update.",
      "Structured code using modular functions for clarity and maintainability.",
      "Included fallback UI for empty or broken API responses.",
      "Styled weather cards and inputs for better visual hierarchy and accessibility.",
      "Ensured compatibility across all modern browsers (Chrome, Firefox, Edge).",
      "Used CSS animations to animate card entries and button hover effects.",
      "Optimized performance by minimizing unnecessary DOM updates.",
      "Added current date and time functionality with JavaScript Date object.",
      "Created a clean, mobile-friendly interface without external frameworks.",
      "Hosted the project on Netlify for live demo access.",
      "Used Git and GitHub for source control and version tracking.",
      "Technologies used: JavaScript, HTML, CSS, OpenWeather API, Netlify."
    ]
  },
  {
    "id": "BMI Calc with Hight Converter ",
    "name": "BMI Calc with Hight Converter ",
    "description": "calculate Body Mass Index (BMI) based on user input.",
    "link": "https://bmicalcindex.netlify.app/",
    "title": "BMI Calculator",
    "image": "/images/bmi_SS.png",
    "qr": "/images/bmi_qr.png",
    "Technologies": [
      "JavaScript",
      "HTML",
      "CSS",
      "Netlify"
    ],
    "Full_description": [
      "Built a BMI Calculator Web App using HTML, CSS, and JavaScript for core logic.",
      "Added a height converter to switch between feet/inches and centimeters interactively.",
      "Allowed users to input height and weight, then dynamically calculated BMI.",
      "Used JavaScript functions to perform precise BMI and unit conversions.",
      "Provided BMI classification results (e.g., Underweight, Normal, Overweight, Obese).",
      "Designed a clean, responsive UI using Flexbox layout for mobile and desktop.",
      "Displayed results in real-time with clear visual feedback and color-coded categories.",
      "Added validation to ensure only numeric inputs are accepted in all fields.",
      "Integrated reset functionality to clear inputs and results easily.",
      "Applied CSS transitions and hover animations to enhance interactivity.",
      "Showed tooltips or helper text to guide users about units and ranges.",
      "Supported dual unit inputs: metric (cm/kg) and imperial (ft/lbs).",
      "Modularized the JS code for calculation, conversion, and UI rendering.",
      "Included real-time height unit conversion logic from feet/inches to centimeters and vice versa.",
      "Added themed styling and visual indicators for each BMI range using CSS.",
      "Ensured accessibility by using semantic HTML tags and ARIA roles.",
      "Made sure app was usable across different browsers (Chrome, Firefox, Edge).",
      "Hosted the final project on Netlify for public access.",
      "Used Git and GitHub for version control and collaboration.",
      "Technologies used: JavaScript, HTML5, CSS3, Netlify."
    ]
  }
]